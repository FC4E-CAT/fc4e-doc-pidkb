type Authority {
  aUT: String
  descAuthority: String
  iDAUT: Int
  labelAuthority: String
  lastTouch: String
  "Unique identifier for the entry"
  lodAUT: String
  populatedBy: String
}

type Identifier {
  "A description for the identifier"
  descIdentifier: String
  iDIDN: Int
  iDN: String
  "A label for the identifier"
  labelIdentifier: String
  lastTouch: String
  "Unique identifier for the entry"
  lodIDN: String
  lodIND_V: String
  populatedBy: String
  "ISO-8601"
  startDate: DateTime
}

type MPA {
  descMPA: String
  iDMPA: Int
  labelMPA: String
  lastTouch: String
  "Unique identifier for the entry"
  lodMPA: String
  mPA: String
  populatedBy: String
  "ISO-8601"
  startDate: DateTime
}

type Manager {
  certification: String
  country: String
  descManager: String
  labelManager: String
  lastTouch: String
  lodMAN: String
  lodMAN_V: String
  mAN: String
  populatedBy: String
  "ISO-8601"
  startDate: DateTime
}

type ManagerProvider {
  id: ManagerProviderId
  identifier: Identifier
  lastTouch: String
  lodRelation: String
  manager: Manager
  populatedBy: String
  provider: Provider
}

type ManagerProviderId {
  lodIDN: String
  lodMAN: String
  lodPRV: String
}

type PropertiesStackCombined {
  labelProperty: String
  lodIDN: String
  lodRelation: String
  value: String
}

type PropertiesStackDynamic {
  labelProperty: String
  lodIDN: String
  lodRelation: String
  value: String
}

type PropertiesStackStatic {
  labelProperty: String
  lodIDN: String
  lodRelation: String
  value: String
}

type Provider {
  country: String
  descProvider: String
  iDPRV: Int
  labelProvider: String
  "ISO-8601"
  lastTouch: Date
  lodPRV: String
  lodPRV_V: String
  lodTPR: String
  pRV: String
  populatedBy: String
  "ISO-8601"
  startDate: DateTime
}

"Query root"
type Query {
  "Fetches All Manager Providers"
  allManagerProviders: [ManagerProvider]
  "Fetches All Authorities"
  getAuthorities: [Authority]
  "Fetches an Authority by Id"
  getAuthorityById(
    "The id of the authority"
    id: String = "pid_graph:00C7B7CF"
  ): Authority
  "Fetches a paginated list of Authorities"
  getAuthorityByPage(
    "Indicates the page number. Page number must be >= 1."
    page: Int = 1,
    "Page size must be between 1 and 100."
    size: Int = 10
  ): [Authority]
  "Fetches an Identifier by Id"
  getIdentifierById(
    "The id of the identifier"
    id: String = "pid_graph:03A715EA1"
  ): Identifier
  "Fetches All Identifiers"
  getIdentifiers: [Identifier]
  "Fetches a paginated list of identifiers"
  getIdentifiersByPage(
    "Indicates the page number. Page number must be >= 1."
    page: Int = 1,
    "Page size must be between 1 and 100."
    size: Int = 10
  ): [Identifier]
  "Fetches a MPA by Id"
  getMPAById(
    "The id of the MPA"
    id: String = "pid_graph:70E2C260"
  ): MPA
  "Get All MPA"
  getMPAs: [MPA]
  "Fetches a paginated list of MPA"
  getMPAsByPage(
    "Indicates the page number. Page number must be >= 1."
    page: Int = 1,
    "Page size must be between 1 and 100."
    size: Int = 10
  ): [MPA]
  "Fetches a Manager by Id"
  getManagerById(
    "The id of the manager"
    id: String = "pid_graph:2FBC5B5F"
  ): Manager
  "Fetches a paginated list of Managers"
  getManagerByPage(
    "Indicates the page number. Page number must be >= 1."
    page: Int = 1,
    "Page size must be between 1 and 100."
    size: Int = 10
  ): [Manager]
  "Get All Managers"
  getManagers: [Manager]
  "Fetches combined properties from the database."
  getPropertiesStackCombined: [PropertiesStackCombined]
  "Fetches a Property Stack Combination by Id"
  getPropertiesStackCombinedById(
    "The id of the identifier"
    id: String = "pid_graph:D9D0AD30"
  ): PropertiesStackCombined
  "Fetches a list of combined (static, dynamic) properties by label"
  getPropertiesStackCombinedByLabel(
    "The label of the Property"
    label: String = "Status"
  ): [PropertiesStackCombined]
  "Fetches a paginated list of the combined (static, dynamic) properties"
  getPropertiesStackCombinedPaged(
    "Indicates the page number. Page number must be >= 1."
    page: Int = 1,
    "Page size must be between 1 and 100."
    size: Int = 10
  ): [PropertiesStackCombined]
  "Fetches properties from the database."
  getPropertiesStackDynamic: [PropertiesStackDynamic]
  "Fetches a list of dynamic properties by label"
  getPropertiesStackDynamicByLabel(
    "The label of the Property"
    label: String = "Managers"
  ): [PropertiesStackDynamic]
  "Fetches a paginated list of dynamic properties"
  getPropertiesStackDynamicPaged(
    "Indicates the page number. Page number must be >= 1."
    page: Int = 1,
    "Page size must be between 1 and 100."
    size: Int = 10
  ): [PropertiesStackDynamic]
  "Fetches static properties from the database."
  getPropertiesStackStatic: [PropertiesStackStatic]
  "Fetches a list of static properties by label"
  getPropertiesStackStaticByLabel(
    "The label of the Property"
    label: String = "Resolution Topology"
  ): [PropertiesStackStatic]
  "Fetches a paginated list of static properties"
  getPropertiesStackStaticPaged(
    "Indicates the page number. Page number must be >= 1."
    page: Int = 1,
    "Page size must be between 1 and 100."
    size: Int = 10
  ): [PropertiesStackStatic]
  "Fetches a Provider by Id"
  getProviderById(
    "The id of the provider"
    id: String = "pid_graph:3C391CE0"
  ): Provider
  "Get All Providers"
  getProviders: [Provider]
  "Fetches a paginated list of identifiers"
  getProvidersByPage(
    "Indicates the page number. Page number must be >= 1."
    page: Int = 1,
    "Page size must be between 1 and 100."
    size: Int = 10
  ): [Provider]
  "Fetches resolved identifier authority "
  getResolvedIdentifierAuthorities: [ResolvedIdentifierAuthority]
  "Fetches a list of resolved identifier authorities by label"
  getResolvedIdentifierAuthoritiesByLabel(
    "The label of the Authority"
    label: String = "DONA"
  ): [ResolvedIdentifierAuthority]
  "Fetches a paginated list of resolved identifier authorities"
  getResolvedIdentifierAuthoritiesPaged(
    "Indicates the page number. Page number must be >= 1."
    page: Int = 1,
    "Page size must be between 1 and 100."
    size: Int = 10
  ): [ResolvedIdentifierAuthority]
  "Fetch all resolved identifier mpas"
  getResolvedIdentifierMPAs: [ResolvedIdentifierMPA]
  "Fetches a list of resolved identifier MPAs by label"
  getResolvedIdentifierMPAsByLabel(
    "The label of the Resolved Identifier"
    label: String = "ORCID"
  ): [ResolvedIdentifierMPA]
  "Fetches a paginated list of resolved identifier MPAs"
  getResolvedIdentifierMPAsPaged(
    "Indicates the page number. Page number must be >= 1."
    page: Int = 1,
    "Page size must be between 1 and 100."
    size: Int = 10
  ): [ResolvedIdentifierMPA]
  "Fetch all resolved identifier provider"
  getResolvedIdentifierProviders: [ResolvedIdentifierProvider]
  "Fetches a list of resolved identifier providers by label"
  getResolvedIdentifierProvidersByLabel(
    "The label of the provider"
    label: String = "arXiv.org"
  ): [ResolvedIdentifierProvider]
  "Fetches a paginated list of resolved identifier providers"
  getResolvedIdentifierProvidersPaged(
    "Indicates the page number. Page number must be >= 1."
    page: Int = 1,
    "Page size must be between 1 and 100."
    size: Int = 10
  ): [ResolvedIdentifierProvider]
  "Fetch all resolved identifier schemes"
  getResolvedIdentifierSchemes: [ResolvedIdentifierScheme]
  "Fetches a list of resolved identifier scheme by label"
  getResolvedIdentifierSchemesByLabel(
    "The label of the Scheme"
    label: String = "URN:NBN"
  ): [ResolvedIdentifierScheme]
  "Fetches a paginated list of resolved identifier schemes"
  getResolvedIdentifierSchemesPaged(
    "Indicates the page number. Page number must be >= 1."
    page: Int = 1,
    "Page size must be between 1 and 100."
    size: Int = 10
  ): [ResolvedIdentifierScheme]
  "Fetches resolved identifier stack "
  getResolvedIdentifierStack: [ResolvedIdentifierStack]
  "Fetches a list of resolved identifier stacks by Actor"
  getResolvedIdentifierStackByActor(
    "The name of the actor"
    actor: String = "Authority"
  ): [ResolvedIdentifierStack]
  "Fetches a Resolved Identifier Stack by Id"
  getResolvedIdentifierStackById(
    "The id of the Identifier"
    id: String = "pid_graph:998B7874"
  ): ResolvedIdentifierStack
  "Fetches a list of resolved identifier stacks by Label"
  getResolvedIdentifierStackByLabel(
    "The label of the identifier"
    label: String = "DONA"
  ): [ResolvedIdentifierStack]
  "Fetches a list of resolved identifier stacks by Identifiers Label"
  getResolvedIdentifierStackByLabelIdentifier(
    "The label of the Identifier"
    label: String = "DOI"
  ): [ResolvedIdentifierStack]
  "Fetches a paginated list of resolved identifier Stack"
  getResolvedIdentifierStackPaged(
    "Indicates the page number. Page number must be >= 1."
    page: Int = 1,
    "Page size must be between 1 and 100."
    size: Int = 10
  ): [ResolvedIdentifierStack]
  "Fetches resolved identifier standard "
  getResolvedIdentifierStandards: [ResolvedIdentifierStandard]
  "Fetches resolved identifier standard from the database by label."
  getResolvedIdentifierStandardsByLabel(
    "The label of the Standard"
    label: String = "Bibcode Published Schema"
  ): [ResolvedIdentifierStandard]
  "Fetches a paginated list of resolved identifier standard"
  getResolvedIdentifierStandardsPaged(
    "Indicates the page number. Page number must be >= 1."
    page: Int = 1,
    "Page size must be between 1 and 100."
    size: Int = 10
  ): [ResolvedIdentifierStandard]
  "Fetches a Scheme by Id"
  getSchemeById(
    "The id of the scheme"
    id: String = "pid_graph:466E3789"
  ): Scheme
  "Get All Schemes"
  getSchemes: [Scheme]
  "Fetches a Standard by Id"
  getStandardById(
    "The id of the standard"
    id: String = "pid_graph:FCDAACDB"
  ): Standard
  "Fetches a paginated list of Standards"
  getStandardByPage(
    "Indicates the page number. Page number must be >= 1."
    page: Int = 1,
    "Page size must be between 1 and 100."
    size: Int = 10
  ): [Standard]
  "Get All Standards"
  getStandards: [Standard]
  "Fetches All Managers"
  managers: [Manager]
  "Fetches a list of properties stacks combined by search"
  searchPropertiesStackCombinedStack(
    "Search by labelProperty, lodIDN, labelIdentifier, value"
    search: String = "hasProperty"
  ): [PropertiesStackCombined]
  "Fetches a list of resolved identifier stacks by search"
  searchResolvedIdentifierStack(
    "Search by actor, labelIdentifier, label"
    search: String = "MPA"
  ): [ResolvedIdentifierStack]
}

type ResolvedIdentifierAuthority {
  actor: String
  label: String
  labelIdentifier: String
  lod: String
  lodAct: String
  lodIDN: String
}

type ResolvedIdentifierMPA {
  actor: String
  labelIdentifier: String
  labelMPA: String
  lodAct: String
  lodIdn: String
  lodMPA: String
}

type ResolvedIdentifierProvider {
  actor: String
  labelIdentifier: String
  labelProvider: String
  lodAct: String
  lodIdn: String
  lodPrv: String
}

type ResolvedIdentifierScheme {
  actor: String
  label: String
  labelIdentifier: String
  lod: String
  lodAct: String
  lodIDN: String
}

type ResolvedIdentifierStack {
  actor: String
  label: String
  labelIdentifier: String
  lod: String
  lodAct: String
  lodIDN: String
}

type ResolvedIdentifierStandard {
  actor: String
  label: String
  labelIdentifier: String
  lod: String
  lodAct: String
  lodIDN: String
}

type Scheme {
  descScheme: String
  iDSCH: Int
  labelScheme: String
  lastTouch: String
  lodSCH: String
  lodSCH_V: String
  lodTSC: String
  populatedBy: String
  sCH: String
  "ISO-8601"
  startDate: DateTime
}

type Standard {
  descStandard: String
  iDSTD: Int
  labelStandard: String
  lastTouch: String
  lodSTD: String
  lodSTD_V: String
  lodTST: String
  populatedBy: String
  sTD: String
  "ISO-8601"
  startDate: DateTime
}